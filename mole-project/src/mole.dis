
mole.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	e9 c0       	rjmp	.+466    	; 0x1d8 <__vector_1>
   6:	00 00       	nop
   8:	0c c1       	rjmp	.+536    	; 0x222 <__vector_2>
   a:	00 00       	nop
   c:	2f c1       	rjmp	.+606    	; 0x26c <__vector_3>
   e:	00 00       	nop
  10:	52 c1       	rjmp	.+676    	; 0x2b6 <__vector_4>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
  34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
  56:	00 00       	nop
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2a c0       	rjmp	.+84     	; 0xe2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	28 c0       	rjmp	.+80     	; 0xe2 <__bad_interrupt>
  92:	00 00       	nop
  94:	26 c0       	rjmp	.+76     	; 0xe2 <__bad_interrupt>
  96:	00 00       	nop
  98:	24 c0       	rjmp	.+72     	; 0xe2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	22 c0       	rjmp	.+68     	; 0xe2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	20 c0       	rjmp	.+64     	; 0xe2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	1e c0       	rjmp	.+60     	; 0xe2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	1c c0       	rjmp	.+56     	; 0xe2 <__bad_interrupt>
	...

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e4 e4       	ldi	r30, 0x44	; 68
  c0:	f8 e0       	ldi	r31, 0x08	; 8
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	ac 31       	cpi	r26, 0x1C	; 28
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	ac e1       	ldi	r26, 0x1C	; 28
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a8 32       	cpi	r26, 0x28	; 40
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	1b d2       	rcall	.+1078   	; 0x516 <main>
  e0:	af c3       	rjmp	.+1886   	; 0x840 <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <init_interrupt>:
       Use INT0, INT1, INT2, INT3 : PD0. PD1, PD2, PD3 
       Interrupt occurs at Falling edge
    */


    EICRA |= (1<<ISC01) | (0<<ISC00) | (1<<ISC11) | (0<<ISC10) | (1<<ISC21) | (0<<ISC20) | (1<<ISC31) | (0<<ISC30);
  e4:	e9 e6       	ldi	r30, 0x69	; 105
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	8a 6a       	ori	r24, 0xAA	; 170
  ec:	80 83       	st	Z, r24
    EIMSK |= (1<<INT0) | (1<<INT1) | (1<<INT2) | (1<<INT3);
  ee:	8d b3       	in	r24, 0x1d	; 29
  f0:	8f 60       	ori	r24, 0x0F	; 15
  f2:	8d bb       	out	0x1d, r24	; 29
  f4:	08 95       	ret

000000f6 <init_GPIO>:
        Initializing GPIO ports
        Moles LEDs ports are DDR_MOLE and PORT_MOLE, what is B
        Levels LEDs ports are C ports and E ports
    */

    DDR_MOLE = 0xff;
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	84 b9       	out	0x04, r24	; 4
    PORT_MOLE = 0x00;
  fa:	15 b8       	out	0x05, r1	; 5

    DDR_LEVEL_PORT_C |= (1 << PORT6) | (1 << PORT7);    // PC6 : Green, PC7 : Yellow
  fc:	87 b1       	in	r24, 0x07	; 7
  fe:	80 6c       	ori	r24, 0xC0	; 192
 100:	87 b9       	out	0x07, r24	; 7
    DDR_LEVEL_PORT_E |= (1 << PORT6);                   // PE7 : Red
 102:	6e 9a       	sbi	0x0d, 6	; 13
    LEVEL_PORT_C = 0x00;                                // Level show port initializing
 104:	18 b8       	out	0x08, r1	; 8
    LEVEL_PORT_E = 0x00;
 106:	1e b8       	out	0x0e, r1	; 14

    DDRD |= (1 << BUZZER);                            //Buzzer port setting : PD6
 108:	56 9a       	sbi	0x0a, 6	; 10
 10a:	08 95       	ret

0000010c <buzzer>:
void buzzer(int is_gameover)
{
    int i=0;

    // Make buzzer sounds long when game is over
    while( i < 50+(is_gameover*1000) )
 10c:	28 ee       	ldi	r18, 0xE8	; 232
 10e:	33 e0       	ldi	r19, 0x03	; 3
 110:	ac 01       	movw	r20, r24
 112:	42 9f       	mul	r20, r18
 114:	c0 01       	movw	r24, r0
 116:	43 9f       	mul	r20, r19
 118:	90 0d       	add	r25, r0
 11a:	52 9f       	mul	r21, r18
 11c:	90 0d       	add	r25, r0
 11e:	11 24       	eor	r1, r1
 120:	c1 96       	adiw	r24, 0x31	; 49
}

// Make buzzer sound
void buzzer(int is_gameover)
{
    int i=0;
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	30 e0       	ldi	r19, 0x00	; 0

    // Make buzzer sounds long when game is over
    while( i < 50+(is_gameover*1000) )
 126:	82 17       	cp	r24, r18
 128:	93 07       	cpc	r25, r19
 12a:	94 f0       	brlt	.+36     	; 0x150 <buzzer+0x44>
    {
        PORTD |= (1<<BUZZER);
 12c:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	ef ee       	ldi	r30, 0xEF	; 239
 130:	fa e0       	ldi	r31, 0x0A	; 10
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <buzzer+0x26>
 136:	00 c0       	rjmp	.+0      	; 0x138 <buzzer+0x2c>
 138:	00 00       	nop
        _delay_us(BUZZER_DELAY);
        PORTD &= ~((0<<BUZZER) | 0xFF);
 13a:	4b b1       	in	r20, 0x0b	; 11
 13c:	1b b8       	out	0x0b, r1	; 11
 13e:	ef ee       	ldi	r30, 0xEF	; 239
 140:	fa e0       	ldi	r31, 0x0A	; 10
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <buzzer+0x36>
 146:	00 c0       	rjmp	.+0      	; 0x148 <buzzer+0x3c>
 148:	00 00       	nop
        _delay_us(BUZZER_DELAY);
        i++;
 14a:	2f 5f       	subi	r18, 0xFF	; 255
 14c:	3f 4f       	sbci	r19, 0xFF	; 255
 14e:	eb cf       	rjmp	.-42     	; 0x126 <buzzer+0x1a>
    }
}
 150:	08 95       	ret

00000152 <kill_mole>:

// Killing mole by user button input
void kill_mole(int num)
{
 152:	a8 e0       	ldi	r26, 0x08	; 8
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	ee ea       	ldi	r30, 0xAE	; 174
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	95 c2       	rjmp	.+1322   	; 0x686 <__prologue_saves__+0x18>
 15c:	28 e0       	ldi	r18, 0x08	; 8
    int moles[4] = { MOLE0, MOLE1, MOLE2, MOLE3 };      //To iteration
 15e:	e4 e1       	ldi	r30, 0x14	; 20
 160:	f1 e0       	ldi	r31, 0x01	; 1
 162:	de 01       	movw	r26, r28
 164:	11 96       	adiw	r26, 0x01	; 1
 166:	01 90       	ld	r0, Z+
 168:	0d 92       	st	X+, r0
 16a:	2a 95       	dec	r18
 16c:	e1 f7       	brne	.-8      	; 0x166 <kill_mole+0x14>
 16e:	8c 01       	movw	r16, r24

    if(mole_status[num])
 170:	00 0f       	add	r16, r16
 172:	11 1f       	adc	r17, r17
 174:	c8 01       	movw	r24, r16
 176:	84 5e       	subi	r24, 0xE4	; 228
 178:	9e 4f       	sbci	r25, 0xFE	; 254
 17a:	7c 01       	movw	r14, r24
 17c:	fc 01       	movw	r30, r24
 17e:	80 81       	ld	r24, Z
 180:	91 81       	ldd	r25, Z+1	; 0x01
 182:	89 2b       	or	r24, r25
 184:	31 f1       	breq	.+76     	; 0x1d2 <kill_mole+0x80>
 186:	25 b1       	in	r18, 0x05	; 5
    {
        PORT_MOLE &= ~((1 << moles[num]) & 0xff);
 188:	e1 e0       	ldi	r30, 0x01	; 1
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	ec 0f       	add	r30, r28
 18e:	fd 1f       	adc	r31, r29
 190:	e0 0f       	add	r30, r16
 192:	f1 1f       	adc	r31, r17
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	00 80       	ld	r0, Z
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <kill_mole+0x4e>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	0a 94       	dec	r0
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <kill_mole+0x4a>
 1a4:	80 95       	com	r24
 1a6:	82 23       	and	r24, r18
 1a8:	85 b9       	out	0x05, r24	; 5
 1aa:	80 91 26 01 	lds	r24, 0x0126
        catched++;
 1ae:	90 91 27 01 	lds	r25, 0x0127
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	90 93 27 01 	sts	0x0127, r25
 1b8:	80 93 26 01 	sts	0x0126, r24
 1bc:	80 e0       	ldi	r24, 0x00	; 0
        buzzer(CATCH_MOLE);
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	a5 df       	rcall	.-182    	; 0x10c <buzzer>
 1c2:	f7 01       	movw	r30, r14
 1c4:	11 82       	std	Z+1, r1	; 0x01
        mole_status[num] = 0;
 1c6:	10 82       	st	Z, r1
 1c8:	f8 01       	movw	r30, r16
 1ca:	ea 5f       	subi	r30, 0xFA	; 250
        mole_living_times[num] = 0;
 1cc:	fe 4f       	sbci	r31, 0xFE	; 254
 1ce:	11 82       	std	Z+1, r1	; 0x01
 1d0:	10 82       	st	Z, r1
 1d2:	28 96       	adiw	r28, 0x08	; 8
 1d4:	e6 e0       	ldi	r30, 0x06	; 6
    }
}
 1d6:	73 c2       	rjmp	.+1254   	; 0x6be <__epilogue_restores__+0x18>

000001d8 <__vector_1>:

/* INT0 routine : Mole 0 : Button 0 */
ISR(INT0_vect)
{
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	2f 93       	push	r18
 1e4:	3f 93       	push	r19
 1e6:	4f 93       	push	r20
 1e8:	5f 93       	push	r21
 1ea:	6f 93       	push	r22
 1ec:	7f 93       	push	r23
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	af 93       	push	r26
 1f4:	bf 93       	push	r27
 1f6:	ef 93       	push	r30
 1f8:	ff 93       	push	r31
    kill_mole(0);
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	a9 df       	rcall	.-174    	; 0x152 <kill_mole>
 200:	ff 91       	pop	r31
}
 202:	ef 91       	pop	r30
 204:	bf 91       	pop	r27
 206:	af 91       	pop	r26
 208:	9f 91       	pop	r25
 20a:	8f 91       	pop	r24
 20c:	7f 91       	pop	r23
 20e:	6f 91       	pop	r22
 210:	5f 91       	pop	r21
 212:	4f 91       	pop	r20
 214:	3f 91       	pop	r19
 216:	2f 91       	pop	r18
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <__vector_2>:

/* INT1 routine : Mole 1 : Button 1 */
ISR(INT1_vect)
{
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	2f 93       	push	r18
 22e:	3f 93       	push	r19
 230:	4f 93       	push	r20
 232:	5f 93       	push	r21
 234:	6f 93       	push	r22
 236:	7f 93       	push	r23
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
 23c:	af 93       	push	r26
 23e:	bf 93       	push	r27
 240:	ef 93       	push	r30
 242:	ff 93       	push	r31
    kill_mole(1);
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	84 df       	rcall	.-248    	; 0x152 <kill_mole>
 24a:	ff 91       	pop	r31
}
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <__vector_3>:

/* INT2 routine : Mole 2 : Button 2 */
ISR(INT2_vect)
{
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	2f 93       	push	r18
 278:	3f 93       	push	r19
 27a:	4f 93       	push	r20
 27c:	5f 93       	push	r21
 27e:	6f 93       	push	r22
 280:	7f 93       	push	r23
 282:	8f 93       	push	r24
 284:	9f 93       	push	r25
 286:	af 93       	push	r26
 288:	bf 93       	push	r27
 28a:	ef 93       	push	r30
 28c:	ff 93       	push	r31
    kill_mole(2);
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	5f df       	rcall	.-322    	; 0x152 <kill_mole>
 294:	ff 91       	pop	r31
}
 296:	ef 91       	pop	r30
 298:	bf 91       	pop	r27
 29a:	af 91       	pop	r26
 29c:	9f 91       	pop	r25
 29e:	8f 91       	pop	r24
 2a0:	7f 91       	pop	r23
 2a2:	6f 91       	pop	r22
 2a4:	5f 91       	pop	r21
 2a6:	4f 91       	pop	r20
 2a8:	3f 91       	pop	r19
 2aa:	2f 91       	pop	r18
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <__vector_4>:

/* INT3 routine : Mole 3 : Button 3 */
ISR(INT3_vect)
{
 2b6:	1f 92       	push	r1
 2b8:	0f 92       	push	r0
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	0f 92       	push	r0
 2be:	11 24       	eor	r1, r1
 2c0:	2f 93       	push	r18
 2c2:	3f 93       	push	r19
 2c4:	4f 93       	push	r20
 2c6:	5f 93       	push	r21
 2c8:	6f 93       	push	r22
 2ca:	7f 93       	push	r23
 2cc:	8f 93       	push	r24
 2ce:	9f 93       	push	r25
 2d0:	af 93       	push	r26
 2d2:	bf 93       	push	r27
 2d4:	ef 93       	push	r30
 2d6:	ff 93       	push	r31
    kill_mole(3);
 2d8:	83 e0       	ldi	r24, 0x03	; 3
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	3a df       	rcall	.-396    	; 0x152 <kill_mole>
 2de:	ff 91       	pop	r31
}
 2e0:	ef 91       	pop	r30
 2e2:	bf 91       	pop	r27
 2e4:	af 91       	pop	r26
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	7f 91       	pop	r23
 2ec:	6f 91       	pop	r22
 2ee:	5f 91       	pop	r21
 2f0:	4f 91       	pop	r20
 2f2:	3f 91       	pop	r19
 2f4:	2f 91       	pop	r18
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <new_mole>:

/* Set new mole and show */
void new_mole(int new)
{
    mole_status[new] = 1;
 300:	9c 01       	movw	r18, r24
 302:	22 0f       	add	r18, r18
 304:	33 1f       	adc	r19, r19
 306:	f9 01       	movw	r30, r18
 308:	e4 5e       	subi	r30, 0xE4	; 228
 30a:	fe 4f       	sbci	r31, 0xFE	; 254
 30c:	41 e0       	ldi	r20, 0x01	; 1
 30e:	50 e0       	ldi	r21, 0x00	; 0
 310:	51 83       	std	Z+1, r21	; 0x01
 312:	40 83       	st	Z, r20
    mole_living_times[new] = next_mole_living_times;        //Set new living time at that position
 314:	40 91 10 01 	lds	r20, 0x0110
 318:	50 91 11 01 	lds	r21, 0x0111
 31c:	f9 01       	movw	r30, r18
 31e:	ea 5f       	subi	r30, 0xFA	; 250
 320:	fe 4f       	sbci	r31, 0xFE	; 254
 322:	51 83       	std	Z+1, r21	; 0x01
 324:	40 83       	st	Z, r20

    //Light that position
    switch(new)
 326:	81 30       	cpi	r24, 0x01	; 1
 328:	91 05       	cpc	r25, r1
 32a:	61 f0       	breq	.+24     	; 0x344 <new_mole+0x44>
 32c:	1c f4       	brge	.+6      	; 0x334 <new_mole+0x34>
 32e:	89 2b       	or	r24, r25
 330:	39 f0       	breq	.+14     	; 0x340 <new_mole+0x40>
 332:	08 95       	ret
 334:	82 30       	cpi	r24, 0x02	; 2
 336:	91 05       	cpc	r25, r1
 338:	39 f0       	breq	.+14     	; 0x348 <new_mole+0x48>
 33a:	03 97       	sbiw	r24, 0x03	; 3
 33c:	39 f0       	breq	.+14     	; 0x34c <new_mole+0x4c>
 33e:	08 95       	ret
    {
        case 0:
        PORT_MOLE |= (1<<MOLE0);
 340:	2f 9a       	sbi	0x05, 7	; 5
 342:	08 95       	ret
        break;

        case 1:
        PORT_MOLE |= (1<<MOLE1);
 344:	2e 9a       	sbi	0x05, 6	; 5
        break;
 346:	08 95       	ret

        case 2:
        PORT_MOLE |= (1<<MOLE2);
 348:	2d 9a       	sbi	0x05, 5	; 5
        break;
 34a:	08 95       	ret

        case 3:
        PORT_MOLE |= (1<<MOLE3);
 34c:	2c 9a       	sbi	0x05, 4	; 5
 34e:	08 95       	ret

00000350 <shutdown_mole>:
}

/* Kill old mole that over its living time */
void shutdown_mole(int mole_number)
{
    switch(mole_number)
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	91 05       	cpc	r25, r1
 354:	69 f0       	breq	.+26     	; 0x370 <shutdown_mole+0x20>
 356:	24 f4       	brge	.+8      	; 0x360 <shutdown_mole+0x10>
 358:	00 97       	sbiw	r24, 0x00	; 0
 35a:	69 f4       	brne	.+26     	; 0x376 <shutdown_mole+0x26>
    {
        case 0:
        PORT_MOLE &= ~((1<<MOLE0) & 0xff);
 35c:	2f 98       	cbi	0x05, 7	; 5
        break;
 35e:	0b c0       	rjmp	.+22     	; 0x376 <shutdown_mole+0x26>
}

/* Kill old mole that over its living time */
void shutdown_mole(int mole_number)
{
    switch(mole_number)
 360:	82 30       	cpi	r24, 0x02	; 2
 362:	91 05       	cpc	r25, r1
 364:	39 f0       	breq	.+14     	; 0x374 <shutdown_mole+0x24>
 366:	83 30       	cpi	r24, 0x03	; 3
 368:	91 05       	cpc	r25, r1
 36a:	29 f4       	brne	.+10     	; 0x376 <shutdown_mole+0x26>
        case 2:
        PORT_MOLE &= ~((1<<MOLE2) & 0xff);
        break;

        case 3:
        PORT_MOLE &= ~((1<<MOLE3) & 0xff);
 36c:	2c 98       	cbi	0x05, 4	; 5
        break;
 36e:	03 c0       	rjmp	.+6      	; 0x376 <shutdown_mole+0x26>
        case 0:
        PORT_MOLE &= ~((1<<MOLE0) & 0xff);
        break;

        case 1:
        PORT_MOLE &= ~((1<<MOLE1) & 0xff);
 370:	2e 98       	cbi	0x05, 6	; 5
        break;
 372:	01 c0       	rjmp	.+2      	; 0x376 <shutdown_mole+0x26>

        case 2:
        PORT_MOLE &= ~((1<<MOLE2) & 0xff);
 374:	2d 98       	cbi	0x05, 5	; 5
        case 3:
        PORT_MOLE &= ~((1<<MOLE3) & 0xff);
        break;
    }

    missed++;
 376:	20 91 24 01 	lds	r18, 0x0124
 37a:	30 91 25 01 	lds	r19, 0x0125
 37e:	2f 5f       	subi	r18, 0xFF	; 255
 380:	3f 4f       	sbci	r19, 0xFF	; 255
 382:	30 93 25 01 	sts	0x0125, r19
 386:	20 93 24 01 	sts	0x0124, r18
    mole_status[mole_number] = 0;
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	fc 01       	movw	r30, r24
 390:	e4 5e       	subi	r30, 0xE4	; 228
 392:	fe 4f       	sbci	r31, 0xFE	; 254
 394:	11 82       	std	Z+1, r1	; 0x01
 396:	10 82       	st	Z, r1
 398:	08 95       	ret

0000039a <level_up>:

/* Increase difficulty */
void level_up(void)
{
    //Control LEDs showing level
    switch(level)
 39a:	80 91 12 01 	lds	r24, 0x0112
 39e:	90 91 13 01 	lds	r25, 0x0113
 3a2:	83 30       	cpi	r24, 0x03	; 3
 3a4:	91 05       	cpc	r25, r1
 3a6:	b1 f0       	breq	.+44     	; 0x3d4 <level_up+0x3a>
 3a8:	38 f4       	brcc	.+14     	; 0x3b8 <level_up+0x1e>
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	91 05       	cpc	r25, r1
 3ae:	59 f0       	breq	.+22     	; 0x3c6 <level_up+0x2c>
 3b0:	02 97       	sbiw	r24, 0x02	; 2
 3b2:	a1 f4       	brne	.+40     	; 0x3dc <level_up+0x42>
        case 1:
        LEVEL_PORT_C |= (1<<PORT6);
        break;

        case 2:
        LEVEL_PORT_C &= ~((1<<PORT6) & 0xff);
 3b4:	46 98       	cbi	0x08, 6	; 8
 3b6:	11 c0       	rjmp	.+34     	; 0x3da <level_up+0x40>

/* Increase difficulty */
void level_up(void)
{
    //Control LEDs showing level
    switch(level)
 3b8:	85 30       	cpi	r24, 0x05	; 5
 3ba:	91 05       	cpc	r25, r1
 3bc:	59 f0       	breq	.+22     	; 0x3d4 <level_up+0x3a>
 3be:	28 f0       	brcs	.+10     	; 0x3ca <level_up+0x30>
 3c0:	06 97       	sbiw	r24, 0x06	; 6
 3c2:	59 f0       	breq	.+22     	; 0x3da <level_up+0x40>
 3c4:	0b c0       	rjmp	.+22     	; 0x3dc <level_up+0x42>
    {
        case 1:
        LEVEL_PORT_C |= (1<<PORT6);
 3c6:	46 9a       	sbi	0x08, 6	; 8
        break;
 3c8:	09 c0       	rjmp	.+18     	; 0x3dc <level_up+0x42>
        LEVEL_PORT_C &= ~((1<<PORT7) & 0xff);
        LEVEL_PORT_E |= (1<<PORT6);
        break;

        case 4:
        LEVEL_PORT_E &= ~((1<<PORT6) & 0xff);
 3ca:	76 98       	cbi	0x0e, 6	; 14
        LEVEL_PORT_C |= (1<<PORT6) | (1<<PORT7);
 3cc:	88 b1       	in	r24, 0x08	; 8
 3ce:	80 6c       	ori	r24, 0xC0	; 192
 3d0:	88 b9       	out	0x08, r24	; 8
        break;
 3d2:	04 c0       	rjmp	.+8      	; 0x3dc <level_up+0x42>

        case 5:
        LEVEL_PORT_C &= ~((1<<PORT7) & 0xff);
 3d4:	47 98       	cbi	0x08, 7	; 8
        LEVEL_PORT_E |= (1<<PORT6);
 3d6:	76 9a       	sbi	0x0e, 6	; 14
        break;
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <level_up+0x42>

        case 6:
        LEVEL_PORT_C |= (1<<PORT7);
 3da:	47 9a       	sbi	0x08, 7	; 8

        default:
        break;
    }

    level++;
 3dc:	80 91 12 01 	lds	r24, 0x0112
 3e0:	90 91 13 01 	lds	r25, 0x0113
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	90 93 13 01 	sts	0x0113, r25
 3ea:	80 93 12 01 	sts	0x0112, r24

    next_mole_set_delay -= 150;
 3ee:	80 91 0e 01 	lds	r24, 0x010E
 3f2:	90 91 0f 01 	lds	r25, 0x010F
 3f6:	86 59       	subi	r24, 0x96	; 150
 3f8:	91 09       	sbc	r25, r1
 3fa:	90 93 0f 01 	sts	0x010F, r25
 3fe:	80 93 0e 01 	sts	0x010E, r24
    next_mole_living_times -= 150;
 402:	80 91 10 01 	lds	r24, 0x0110
 406:	90 91 11 01 	lds	r25, 0x0111
 40a:	86 59       	subi	r24, 0x96	; 150
 40c:	91 09       	sbc	r25, r1
 40e:	90 93 11 01 	sts	0x0111, r25
 412:	80 93 10 01 	sts	0x0110, r24
 416:	08 95       	ret

00000418 <gameover>:
void gameover(void)
{
    int i;
    
    //PORT_MOLE &= ~(((1<<MOLE0) | (1<<MOLE1) | (1<<MOLE2) | (1<<MOLE3)) & 0xff);
    buzzer(GAME_OVER);
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	77 de       	rcall	.-786    	; 0x10c <buzzer>
 41e:	8a e0       	ldi	r24, 0x0A	; 10
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	25 b1       	in	r18, 0x05	; 5

    //Blink mole LEDs
    for(i=0;i<10;i++)
    {
        PORT_MOLE |= (1 << PORT4) | (1 << PORT5) | (1 << PORT6) | (1 << PORT7);
 424:	20 6f       	ori	r18, 0xF0	; 240
 426:	25 b9       	out	0x05, r18	; 5
 428:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 42a:	38 e5       	ldi	r19, 0x58	; 88
 42c:	46 e0       	ldi	r20, 0x06	; 6
 42e:	21 50       	subi	r18, 0x01	; 1
 430:	30 40       	sbci	r19, 0x00	; 0
 432:	40 40       	sbci	r20, 0x00	; 0
 434:	e1 f7       	brne	.-8      	; 0x42e <gameover+0x16>
 436:	00 c0       	rjmp	.+0      	; 0x438 <gameover+0x20>
 438:	00 00       	nop
 43a:	25 b1       	in	r18, 0x05	; 5
        _delay_ms(130);
        PORT_MOLE &= ~(((1 << PORT4) | (1 << PORT5) | (1 << PORT6) | (1 << PORT7)) & 0xff);
 43c:	2f 70       	andi	r18, 0x0F	; 15
 43e:	25 b9       	out	0x05, r18	; 5
 440:	2f ef       	ldi	r18, 0xFF	; 255
 442:	38 e5       	ldi	r19, 0x58	; 88
 444:	46 e0       	ldi	r20, 0x06	; 6
 446:	21 50       	subi	r18, 0x01	; 1
 448:	30 40       	sbci	r19, 0x00	; 0
 44a:	40 40       	sbci	r20, 0x00	; 0
 44c:	e1 f7       	brne	.-8      	; 0x446 <gameover+0x2e>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <gameover+0x38>
 450:	00 00       	nop
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	31 f7       	brne	.-52     	; 0x422 <gameover+0xa>
    
    //PORT_MOLE &= ~(((1<<MOLE0) | (1<<MOLE1) | (1<<MOLE2) | (1<<MOLE3)) & 0xff);
    buzzer(GAME_OVER);

    //Blink mole LEDs
    for(i=0;i<10;i++)
 456:	08 95       	ret

00000458 <start_motion>:
    }
}

// Give period of preparation to user
void start_motion(void)
{
 458:	a8 e0       	ldi	r26, 0x08	; 8
 45a:	b0 e0       	ldi	r27, 0x00	; 0
 45c:	e1 e3       	ldi	r30, 0x31	; 49
 45e:	f2 e0       	ldi	r31, 0x02	; 2
 460:	10 c1       	rjmp	.+544    	; 0x682 <__prologue_saves__+0x14>
 462:	88 e0       	ldi	r24, 0x08	; 8
    int moles[4] = { MOLE0, MOLE1, MOLE2, MOLE3 };
 464:	e4 e1       	ldi	r30, 0x14	; 20
 466:	f1 e0       	ldi	r31, 0x01	; 1
 468:	9e 01       	movw	r18, r28
 46a:	2f 5f       	subi	r18, 0xFF	; 255
 46c:	3f 4f       	sbci	r19, 0xFF	; 255
 46e:	79 01       	movw	r14, r18
 470:	d9 01       	movw	r26, r18
 472:	01 90       	ld	r0, Z+
 474:	0d 92       	st	X+, r0
 476:	8a 95       	dec	r24
 478:	e1 f7       	brne	.-8      	; 0x472 <start_motion+0x1a>
 47a:	28 5f       	subi	r18, 0xF8	; 248
 47c:	3f 4f       	sbci	r19, 0xFF	; 255
 47e:	f7 01       	movw	r30, r14
 480:	61 e0       	ldi	r22, 0x01	; 1
    int i;

    for(i=0;i<4;i++)
    {
        PORT_MOLE |= (1<<moles[i]);
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	45 b1       	in	r20, 0x05	; 5
 486:	80 81       	ld	r24, Z
 488:	32 96       	adiw	r30, 0x02	; 2
 48a:	db 01       	movw	r26, r22
 48c:	02 c0       	rjmp	.+4      	; 0x492 <start_motion+0x3a>
 48e:	aa 0f       	add	r26, r26
 490:	bb 1f       	adc	r27, r27
 492:	8a 95       	dec	r24
 494:	e2 f7       	brpl	.-8      	; 0x48e <start_motion+0x36>
 496:	cd 01       	movw	r24, r26
 498:	84 2b       	or	r24, r20
 49a:	85 b9       	out	0x05, r24	; 5
 49c:	e2 17       	cp	r30, r18
void start_motion(void)
{
    int moles[4] = { MOLE0, MOLE1, MOLE2, MOLE3 };
    int i;

    for(i=0;i<4;i++)
 49e:	f3 07       	cpc	r31, r19
 4a0:	89 f7       	brne	.-30     	; 0x484 <start_motion+0x2c>
 4a2:	bf ef       	ldi	r27, 0xFF	; 255
 4a4:	eb e7       	ldi	r30, 0x7B	; 123
 4a6:	f2 e9       	ldi	r31, 0x92	; 146
 4a8:	b1 50       	subi	r27, 0x01	; 1
 4aa:	e0 40       	sbci	r30, 0x00	; 0
 4ac:	f0 40       	sbci	r31, 0x00	; 0
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <start_motion+0x50>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <start_motion+0x5a>
 4b2:	00 00       	nop
 4b4:	8e 01       	movw	r16, r28
 4b6:	09 5f       	subi	r16, 0xF9	; 249
 4b8:	1f 4f       	sbci	r17, 0xFF	; 255
 4ba:	cc 24       	eor	r12, r12

    _delay_ms(3000);

    for(i=3;i>0;i--)
    {
        PORT_MOLE &= ~((1<<moles[i]) & 0xff);
 4bc:	c3 94       	inc	r12
 4be:	d1 2c       	mov	r13, r1
 4c0:	95 b1       	in	r25, 0x05	; 5
 4c2:	96 01       	movw	r18, r12
 4c4:	d8 01       	movw	r26, r16
 4c6:	0c 90       	ld	r0, X
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <start_motion+0x76>
 4ca:	22 0f       	add	r18, r18
 4cc:	33 1f       	adc	r19, r19
 4ce:	0a 94       	dec	r0
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <start_motion+0x72>
 4d2:	82 2f       	mov	r24, r18
 4d4:	80 95       	com	r24
 4d6:	89 23       	and	r24, r25
 4d8:	85 b9       	out	0x05, r24	; 5
 4da:	80 e0       	ldi	r24, 0x00	; 0
        buzzer(COUNTDOWN);
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	16 de       	rcall	.-980    	; 0x10c <buzzer>
 4e0:	bf ef       	ldi	r27, 0xFF	; 255
 4e2:	e3 ed       	ldi	r30, 0xD3	; 211
 4e4:	f0 e3       	ldi	r31, 0x30	; 48
 4e6:	b1 50       	subi	r27, 0x01	; 1
 4e8:	e0 40       	sbci	r30, 0x00	; 0
 4ea:	f0 40       	sbci	r31, 0x00	; 0
 4ec:	e1 f7       	brne	.-8      	; 0x4e6 <start_motion+0x8e>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <start_motion+0x98>
 4f0:	00 00       	nop
 4f2:	02 50       	subi	r16, 0x02	; 2
 4f4:	11 09       	sbc	r17, r1
 4f6:	0e 15       	cp	r16, r14
 4f8:	1f 05       	cpc	r17, r15
        PORT_MOLE |= (1<<moles[i]);
    }

    _delay_ms(3000);

    for(i=3;i>0;i--)
 4fa:	11 f7       	brne	.-60     	; 0x4c0 <start_motion+0x68>
 4fc:	15 b8       	out	0x05, r1	; 5
 4fe:	2f ef       	ldi	r18, 0xFF	; 255
 500:	31 e1       	ldi	r19, 0x11	; 17
 502:	8a e7       	ldi	r24, 0x7A	; 122
 504:	21 50       	subi	r18, 0x01	; 1
 506:	30 40       	sbci	r19, 0x00	; 0
 508:	80 40       	sbci	r24, 0x00	; 0
 50a:	e1 f7       	brne	.-8      	; 0x504 <start_motion+0xac>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <start_motion+0xb6>
 50e:	00 00       	nop
 510:	28 96       	adiw	r28, 0x08	; 8
 512:	e8 e0       	ldi	r30, 0x08	; 8
        _delay_ms(1000);
    }

    PORT_MOLE = 0x00;
    _delay_ms(2500);
}
 514:	d2 c0       	rjmp	.+420    	; 0x6ba <__epilogue_restores__+0x14>

00000516 <main>:

int main(void)
{
 516:	0f 93       	push	r16
 518:	1f 93       	push	r17
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
    /* Lock Interrupt */
    cli();
 51e:	f8 94       	cli

    int i, new;

    init_GPIO();                    // Initializing GPIO ports
 520:	ea dd       	rcall	.-1068   	; 0xf6 <init_GPIO>
 522:	e0 dd       	rcall	.-1088   	; 0xe4 <init_interrupt>

    init_interrupt();               // Initializing Interrupts
 524:	78 94       	sei
 526:	98 df       	rcall	.-208    	; 0x458 <start_motion>

    sei();
 528:	20 d1       	rcall	.+576    	; 0x76a <rand>
    /*Unlock Interrupt */

    start_motion();
 52a:	64 e0       	ldi	r22, 0x04	; 4
 52c:	70 e0       	ldi	r23, 0x00	; 0

    new_mole(rand() % 4);           //Set initial mole and show
 52e:	8c d0       	rcall	.+280    	; 0x648 <__divmodhi4>
 530:	e7 de       	rcall	.-562    	; 0x300 <new_mole>
 532:	0f e0       	ldi	r16, 0x0F	; 15
 534:	10 e0       	ldi	r17, 0x00	; 0
 536:	8f e9       	ldi	r24, 0x9F	; 159
 538:	9f e0       	ldi	r25, 0x0F	; 15
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <main+0x24>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <main+0x2a>
 540:	00 00       	nop
 542:	c0 e0       	ldi	r28, 0x00	; 0
 544:	d0 e0       	ldi	r29, 0x00	; 0
 546:	fe 01       	movw	r30, r28
 548:	ee 0f       	add	r30, r30
 54a:	ff 1f       	adc	r31, r31
 54c:	df 01       	movw	r26, r30
    while(1)
    {
        /* Global delay 1ms */
        _delay_ms(1);
        
        for(i=0;i<4;i++)
 54e:	a4 5e       	subi	r26, 0xE4	; 228
 550:	be 4f       	sbci	r27, 0xFE	; 254
        {
            /* If current position's mole is live */
            if( mole_status[i] )
 552:	8d 91       	ld	r24, X+
 554:	9c 91       	ld	r25, X
 556:	89 2b       	or	r24, r25
 558:	69 f0       	breq	.+26     	; 0x574 <main+0x5e>
 55a:	ea 5f       	subi	r30, 0xFA	; 250
 55c:	fe 4f       	sbci	r31, 0xFE	; 254
 55e:	80 81       	ld	r24, Z
 560:	91 81       	ldd	r25, Z+1	; 0x01
 562:	01 97       	sbiw	r24, 0x01	; 1
 564:	91 83       	std	Z+1, r25	; 0x01
            {
                mole_living_times[i]--;
 566:	80 83       	st	Z, r24
 568:	80 81       	ld	r24, Z
 56a:	91 81       	ldd	r25, Z+1	; 0x01
 56c:	89 2b       	or	r24, r25
 56e:	11 f4       	brne	.+4      	; 0x574 <main+0x5e>
 570:	ce 01       	movw	r24, r28
 572:	ee de       	rcall	.-548    	; 0x350 <shutdown_mole>

                if( !mole_living_times[i] )
 574:	21 96       	adiw	r28, 0x01	; 1
 576:	c4 30       	cpi	r28, 0x04	; 4
 578:	d1 05       	cpc	r29, r1
 57a:	29 f7       	brne	.-54     	; 0x546 <main+0x30>
                {
                    shutdown_mole(i);       //Living time over : shutdown mole
 57c:	80 91 04 01 	lds	r24, 0x0104
 580:	90 91 05 01 	lds	r25, 0x0105
    while(1)
    {
        /* Global delay 1ms */
        _delay_ms(1);
        
        for(i=0;i<4;i++)
 584:	01 97       	sbiw	r24, 0x01	; 1
 586:	90 93 05 01 	sts	0x0105, r25
                    shutdown_mole(i);       //Living time over : shutdown mole
                }
            }
        }

        new_mole_delay--;
 58a:	80 93 04 01 	sts	0x0104, r24
 58e:	80 91 04 01 	lds	r24, 0x0104
 592:	90 91 05 01 	lds	r25, 0x0105
 596:	89 2b       	or	r24, r25
 598:	a9 f4       	brne	.+42     	; 0x5c4 <main+0xae>
 59a:	e7 d0       	rcall	.+462    	; 0x76a <rand>

        /* If delay time is over */
        if( !new_mole_delay )
 59c:	be 01       	movw	r22, r28
 59e:	54 d0       	rcall	.+168    	; 0x648 <__divmodhi4>
 5a0:	fc 01       	movw	r30, r24
 5a2:	ee 0f       	add	r30, r30
 5a4:	ff 1f       	adc	r31, r31
 5a6:	e4 5e       	subi	r30, 0xE4	; 228
        {
            new = rand() % 4;
 5a8:	fe 4f       	sbci	r31, 0xFE	; 254
 5aa:	20 81       	ld	r18, Z
 5ac:	31 81       	ldd	r19, Z+1	; 0x01
 5ae:	23 2b       	or	r18, r19
 5b0:	09 f4       	brne	.+2      	; 0x5b4 <main+0x9e>
            
            if( !mole_status[new] )
 5b2:	a6 de       	rcall	.-692    	; 0x300 <new_mole>
 5b4:	80 91 0e 01 	lds	r24, 0x010E
 5b8:	90 91 0f 01 	lds	r25, 0x010F
 5bc:	90 93 05 01 	sts	0x0105, r25
 5c0:	80 93 04 01 	sts	0x0104, r24
            {
                new_mole(new);
 5c4:	80 91 26 01 	lds	r24, 0x0126
            }

            new_mole_delay = next_mole_set_delay;
 5c8:	90 91 27 01 	lds	r25, 0x0127
 5cc:	89 2b       	or	r24, r25
 5ce:	c9 f0       	breq	.+50     	; 0x602 <main+0xec>
 5d0:	80 91 26 01 	lds	r24, 0x0126
 5d4:	90 91 27 01 	lds	r25, 0x0127
        }

        /* Level Up : Level 0 to 6*/
        if( catched > 0 && catched % 15 == 0 && catched <= 15 * 7)
 5d8:	b8 01       	movw	r22, r16
 5da:	22 d0       	rcall	.+68     	; 0x620 <__udivmodhi4>
 5dc:	89 2b       	or	r24, r25
 5de:	89 f4       	brne	.+34     	; 0x602 <main+0xec>
 5e0:	80 91 26 01 	lds	r24, 0x0126
 5e4:	90 91 27 01 	lds	r25, 0x0127
 5e8:	8a 36       	cpi	r24, 0x6A	; 106
 5ea:	91 05       	cpc	r25, r1
 5ec:	50 f4       	brcc	.+20     	; 0x602 <main+0xec>
 5ee:	80 91 26 01 	lds	r24, 0x0126
 5f2:	90 91 27 01 	lds	r25, 0x0127
 5f6:	01 96       	adiw	r24, 0x01	; 1
 5f8:	90 93 27 01 	sts	0x0127, r25
 5fc:	80 93 26 01 	sts	0x0126, r24
 600:	cc de       	rcall	.-616    	; 0x39a <level_up>
 602:	80 91 24 01 	lds	r24, 0x0124
        {
            catched++;
 606:	90 91 25 01 	lds	r25, 0x0125
 60a:	0f 97       	sbiw	r24, 0x0f	; 15
 60c:	08 f4       	brcc	.+2      	; 0x610 <main+0xfa>
 60e:	93 cf       	rjmp	.-218    	; 0x536 <main+0x20>
 610:	03 df       	rcall	.-506    	; 0x418 <gameover>
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	90 e0       	ldi	r25, 0x00	; 0
            level_up();
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
        }

        if( missed >= 15 )
 61a:	1f 91       	pop	r17
 61c:	0f 91       	pop	r16
 61e:	08 95       	ret

00000620 <__udivmodhi4>:
 620:	aa 1b       	sub	r26, r26
 622:	bb 1b       	sub	r27, r27
 624:	51 e1       	ldi	r21, 0x11	; 17
 626:	07 c0       	rjmp	.+14     	; 0x636 <__udivmodhi4_ep>

00000628 <__udivmodhi4_loop>:
        {
            gameover();
 628:	aa 1f       	adc	r26, r26
 62a:	bb 1f       	adc	r27, r27
            break;
        }
    }
}
 62c:	a6 17       	cp	r26, r22
 62e:	b7 07       	cpc	r27, r23
 630:	10 f0       	brcs	.+4      	; 0x636 <__udivmodhi4_ep>
 632:	a6 1b       	sub	r26, r22
 634:	b7 0b       	sbc	r27, r23

00000636 <__udivmodhi4_ep>:
 636:	88 1f       	adc	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	5a 95       	dec	r21
 63c:	a9 f7       	brne	.-22     	; 0x628 <__udivmodhi4_loop>
 63e:	80 95       	com	r24
 640:	90 95       	com	r25
 642:	bc 01       	movw	r22, r24
 644:	cd 01       	movw	r24, r26
 646:	08 95       	ret

00000648 <__divmodhi4>:
 648:	97 fb       	bst	r25, 7
 64a:	07 2e       	mov	r0, r23
 64c:	16 f4       	brtc	.+4      	; 0x652 <__divmodhi4+0xa>
 64e:	00 94       	com	r0
 650:	06 d0       	rcall	.+12     	; 0x65e <__divmodhi4_neg1>
 652:	77 fd       	sbrc	r23, 7
 654:	08 d0       	rcall	.+16     	; 0x666 <__divmodhi4_neg2>
 656:	e4 df       	rcall	.-56     	; 0x620 <__udivmodhi4>
 658:	07 fc       	sbrc	r0, 7
 65a:	05 d0       	rcall	.+10     	; 0x666 <__divmodhi4_neg2>
 65c:	3e f4       	brtc	.+14     	; 0x66c <__divmodhi4_exit>

0000065e <__divmodhi4_neg1>:
 65e:	90 95       	com	r25
 660:	81 95       	neg	r24
 662:	9f 4f       	sbci	r25, 0xFF	; 255
 664:	08 95       	ret

00000666 <__divmodhi4_neg2>:
 666:	70 95       	com	r23
 668:	61 95       	neg	r22
 66a:	7f 4f       	sbci	r23, 0xFF	; 255

0000066c <__divmodhi4_exit>:
 66c:	08 95       	ret

0000066e <__prologue_saves__>:
 66e:	2f 92       	push	r2
 670:	3f 92       	push	r3
 672:	4f 92       	push	r4
 674:	5f 92       	push	r5
 676:	6f 92       	push	r6
 678:	7f 92       	push	r7
 67a:	8f 92       	push	r8
 67c:	9f 92       	push	r9
 67e:	af 92       	push	r10
 680:	bf 92       	push	r11
 682:	cf 92       	push	r12
 684:	df 92       	push	r13
 686:	ef 92       	push	r14
 688:	ff 92       	push	r15
 68a:	0f 93       	push	r16
 68c:	1f 93       	push	r17
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	cd b7       	in	r28, 0x3d	; 61
 694:	de b7       	in	r29, 0x3e	; 62
 696:	ca 1b       	sub	r28, r26
 698:	db 0b       	sbc	r29, r27
 69a:	0f b6       	in	r0, 0x3f	; 63
 69c:	f8 94       	cli
 69e:	de bf       	out	0x3e, r29	; 62
 6a0:	0f be       	out	0x3f, r0	; 63
 6a2:	cd bf       	out	0x3d, r28	; 61
 6a4:	09 94       	ijmp

000006a6 <__epilogue_restores__>:
 6a6:	2a 88       	ldd	r2, Y+18	; 0x12
 6a8:	39 88       	ldd	r3, Y+17	; 0x11
 6aa:	48 88       	ldd	r4, Y+16	; 0x10
 6ac:	5f 84       	ldd	r5, Y+15	; 0x0f
 6ae:	6e 84       	ldd	r6, Y+14	; 0x0e
 6b0:	7d 84       	ldd	r7, Y+13	; 0x0d
 6b2:	8c 84       	ldd	r8, Y+12	; 0x0c
 6b4:	9b 84       	ldd	r9, Y+11	; 0x0b
 6b6:	aa 84       	ldd	r10, Y+10	; 0x0a
 6b8:	b9 84       	ldd	r11, Y+9	; 0x09
 6ba:	c8 84       	ldd	r12, Y+8	; 0x08
 6bc:	df 80       	ldd	r13, Y+7	; 0x07
 6be:	ee 80       	ldd	r14, Y+6	; 0x06
 6c0:	fd 80       	ldd	r15, Y+5	; 0x05
 6c2:	0c 81       	ldd	r16, Y+4	; 0x04
 6c4:	1b 81       	ldd	r17, Y+3	; 0x03
 6c6:	aa 81       	ldd	r26, Y+2	; 0x02
 6c8:	b9 81       	ldd	r27, Y+1	; 0x01
 6ca:	ce 0f       	add	r28, r30
 6cc:	d1 1d       	adc	r29, r1
 6ce:	0f b6       	in	r0, 0x3f	; 63
 6d0:	f8 94       	cli
 6d2:	de bf       	out	0x3e, r29	; 62
 6d4:	0f be       	out	0x3f, r0	; 63
 6d6:	cd bf       	out	0x3d, r28	; 61
 6d8:	ed 01       	movw	r28, r26
 6da:	08 95       	ret

000006dc <do_rand>:
 6dc:	8f 92       	push	r8
 6de:	9f 92       	push	r9
 6e0:	af 92       	push	r10
 6e2:	bf 92       	push	r11
 6e4:	cf 92       	push	r12
 6e6:	df 92       	push	r13
 6e8:	ef 92       	push	r14
 6ea:	ff 92       	push	r15
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
 6f0:	ec 01       	movw	r28, r24
 6f2:	68 81       	ld	r22, Y
 6f4:	79 81       	ldd	r23, Y+1	; 0x01
 6f6:	8a 81       	ldd	r24, Y+2	; 0x02
 6f8:	9b 81       	ldd	r25, Y+3	; 0x03
 6fa:	61 15       	cp	r22, r1
 6fc:	71 05       	cpc	r23, r1
 6fe:	81 05       	cpc	r24, r1
 700:	91 05       	cpc	r25, r1
 702:	21 f4       	brne	.+8      	; 0x70c <do_rand+0x30>
 704:	64 e2       	ldi	r22, 0x24	; 36
 706:	79 ed       	ldi	r23, 0xD9	; 217
 708:	8b e5       	ldi	r24, 0x5B	; 91
 70a:	97 e0       	ldi	r25, 0x07	; 7
 70c:	2d e1       	ldi	r18, 0x1D	; 29
 70e:	33 ef       	ldi	r19, 0xF3	; 243
 710:	41 e0       	ldi	r20, 0x01	; 1
 712:	50 e0       	ldi	r21, 0x00	; 0
 714:	38 d0       	rcall	.+112    	; 0x786 <__divmodsi4>
 716:	49 01       	movw	r8, r18
 718:	5a 01       	movw	r10, r20
 71a:	9b 01       	movw	r18, r22
 71c:	ac 01       	movw	r20, r24
 71e:	a7 ea       	ldi	r26, 0xA7	; 167
 720:	b1 e4       	ldi	r27, 0x41	; 65
 722:	4d d0       	rcall	.+154    	; 0x7be <__muluhisi3>
 724:	6b 01       	movw	r12, r22
 726:	7c 01       	movw	r14, r24
 728:	ac ee       	ldi	r26, 0xEC	; 236
 72a:	b4 ef       	ldi	r27, 0xF4	; 244
 72c:	a5 01       	movw	r20, r10
 72e:	94 01       	movw	r18, r8
 730:	52 d0       	rcall	.+164    	; 0x7d6 <__mulohisi3>
 732:	dc 01       	movw	r26, r24
 734:	cb 01       	movw	r24, r22
 736:	8c 0d       	add	r24, r12
 738:	9d 1d       	adc	r25, r13
 73a:	ae 1d       	adc	r26, r14
 73c:	bf 1d       	adc	r27, r15
 73e:	b7 ff       	sbrs	r27, 7
 740:	03 c0       	rjmp	.+6      	; 0x748 <do_rand+0x6c>
 742:	01 97       	sbiw	r24, 0x01	; 1
 744:	a1 09       	sbc	r26, r1
 746:	b0 48       	sbci	r27, 0x80	; 128
 748:	88 83       	st	Y, r24
 74a:	99 83       	std	Y+1, r25	; 0x01
 74c:	aa 83       	std	Y+2, r26	; 0x02
 74e:	bb 83       	std	Y+3, r27	; 0x03
 750:	9f 77       	andi	r25, 0x7F	; 127
 752:	df 91       	pop	r29
 754:	cf 91       	pop	r28
 756:	ff 90       	pop	r15
 758:	ef 90       	pop	r14
 75a:	df 90       	pop	r13
 75c:	cf 90       	pop	r12
 75e:	bf 90       	pop	r11
 760:	af 90       	pop	r10
 762:	9f 90       	pop	r9
 764:	8f 90       	pop	r8
 766:	08 95       	ret

00000768 <rand_r>:
 768:	b9 cf       	rjmp	.-142    	; 0x6dc <do_rand>

0000076a <rand>:
 76a:	80 e0       	ldi	r24, 0x00	; 0
 76c:	91 e0       	ldi	r25, 0x01	; 1
 76e:	b6 cf       	rjmp	.-148    	; 0x6dc <do_rand>

00000770 <srand>:
 770:	a0 e0       	ldi	r26, 0x00	; 0
 772:	b0 e0       	ldi	r27, 0x00	; 0
 774:	80 93 00 01 	sts	0x0100, r24
 778:	90 93 01 01 	sts	0x0101, r25
 77c:	a0 93 02 01 	sts	0x0102, r26
 780:	b0 93 03 01 	sts	0x0103, r27
 784:	08 95       	ret

00000786 <__divmodsi4>:
 786:	05 2e       	mov	r0, r21
 788:	97 fb       	bst	r25, 7
 78a:	16 f4       	brtc	.+4      	; 0x790 <__divmodsi4+0xa>
 78c:	00 94       	com	r0
 78e:	0f d0       	rcall	.+30     	; 0x7ae <__negsi2>
 790:	57 fd       	sbrc	r21, 7
 792:	05 d0       	rcall	.+10     	; 0x79e <__divmodsi4_neg2>
 794:	24 d0       	rcall	.+72     	; 0x7de <__udivmodsi4>
 796:	07 fc       	sbrc	r0, 7
 798:	02 d0       	rcall	.+4      	; 0x79e <__divmodsi4_neg2>
 79a:	46 f4       	brtc	.+16     	; 0x7ac <__divmodsi4_exit>
 79c:	08 c0       	rjmp	.+16     	; 0x7ae <__negsi2>

0000079e <__divmodsi4_neg2>:
 79e:	50 95       	com	r21
 7a0:	40 95       	com	r20
 7a2:	30 95       	com	r19
 7a4:	21 95       	neg	r18
 7a6:	3f 4f       	sbci	r19, 0xFF	; 255
 7a8:	4f 4f       	sbci	r20, 0xFF	; 255
 7aa:	5f 4f       	sbci	r21, 0xFF	; 255

000007ac <__divmodsi4_exit>:
 7ac:	08 95       	ret

000007ae <__negsi2>:
 7ae:	90 95       	com	r25
 7b0:	80 95       	com	r24
 7b2:	70 95       	com	r23
 7b4:	61 95       	neg	r22
 7b6:	7f 4f       	sbci	r23, 0xFF	; 255
 7b8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ba:	9f 4f       	sbci	r25, 0xFF	; 255
 7bc:	08 95       	ret

000007be <__muluhisi3>:
 7be:	31 d0       	rcall	.+98     	; 0x822 <__umulhisi3>
 7c0:	a5 9f       	mul	r26, r21
 7c2:	90 0d       	add	r25, r0
 7c4:	b4 9f       	mul	r27, r20
 7c6:	90 0d       	add	r25, r0
 7c8:	a4 9f       	mul	r26, r20
 7ca:	80 0d       	add	r24, r0
 7cc:	91 1d       	adc	r25, r1
 7ce:	11 24       	eor	r1, r1
 7d0:	08 95       	ret

000007d2 <__mulshisi3>:
 7d2:	b7 ff       	sbrs	r27, 7
 7d4:	f4 cf       	rjmp	.-24     	; 0x7be <__muluhisi3>

000007d6 <__mulohisi3>:
 7d6:	f3 df       	rcall	.-26     	; 0x7be <__muluhisi3>
 7d8:	82 1b       	sub	r24, r18
 7da:	93 0b       	sbc	r25, r19
 7dc:	08 95       	ret

000007de <__udivmodsi4>:
 7de:	a1 e2       	ldi	r26, 0x21	; 33
 7e0:	1a 2e       	mov	r1, r26
 7e2:	aa 1b       	sub	r26, r26
 7e4:	bb 1b       	sub	r27, r27
 7e6:	fd 01       	movw	r30, r26
 7e8:	0d c0       	rjmp	.+26     	; 0x804 <__udivmodsi4_ep>

000007ea <__udivmodsi4_loop>:
 7ea:	aa 1f       	adc	r26, r26
 7ec:	bb 1f       	adc	r27, r27
 7ee:	ee 1f       	adc	r30, r30
 7f0:	ff 1f       	adc	r31, r31
 7f2:	a2 17       	cp	r26, r18
 7f4:	b3 07       	cpc	r27, r19
 7f6:	e4 07       	cpc	r30, r20
 7f8:	f5 07       	cpc	r31, r21
 7fa:	20 f0       	brcs	.+8      	; 0x804 <__udivmodsi4_ep>
 7fc:	a2 1b       	sub	r26, r18
 7fe:	b3 0b       	sbc	r27, r19
 800:	e4 0b       	sbc	r30, r20
 802:	f5 0b       	sbc	r31, r21

00000804 <__udivmodsi4_ep>:
 804:	66 1f       	adc	r22, r22
 806:	77 1f       	adc	r23, r23
 808:	88 1f       	adc	r24, r24
 80a:	99 1f       	adc	r25, r25
 80c:	1a 94       	dec	r1
 80e:	69 f7       	brne	.-38     	; 0x7ea <__udivmodsi4_loop>
 810:	60 95       	com	r22
 812:	70 95       	com	r23
 814:	80 95       	com	r24
 816:	90 95       	com	r25
 818:	9b 01       	movw	r18, r22
 81a:	ac 01       	movw	r20, r24
 81c:	bd 01       	movw	r22, r26
 81e:	cf 01       	movw	r24, r30
 820:	08 95       	ret

00000822 <__umulhisi3>:
 822:	a2 9f       	mul	r26, r18
 824:	b0 01       	movw	r22, r0
 826:	b3 9f       	mul	r27, r19
 828:	c0 01       	movw	r24, r0
 82a:	a3 9f       	mul	r26, r19
 82c:	70 0d       	add	r23, r0
 82e:	81 1d       	adc	r24, r1
 830:	11 24       	eor	r1, r1
 832:	91 1d       	adc	r25, r1
 834:	b2 9f       	mul	r27, r18
 836:	70 0d       	add	r23, r0
 838:	81 1d       	adc	r24, r1
 83a:	11 24       	eor	r1, r1
 83c:	91 1d       	adc	r25, r1
 83e:	08 95       	ret

00000840 <_exit>:
 840:	f8 94       	cli

00000842 <__stop_program>:
 842:	ff cf       	rjmp	.-2      	; 0x842 <__stop_program>
